pipeline {
    agent any
    environment {
        REPO = "s10-final/S10P31C206"
        DOCKERHUB_REGISTRY = "kimhyeokil/back"
        DOCKERHUB_CREDENTIALS = credentials('Docker-hub')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm

                sh """
                sed -i 's|\${JWT_ACCESS}|${env.JWT_ACCESS}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${JWT_REFRESH}|${env.JWT_REFRESH}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${DB_URL}|${env.DB_URL}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${REDIS_HOST}|${env.REDIS_HOST}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${DB_NAME}|${env.DB_NAME}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${DB_PASSWORD}|${env.DB_PASSWORD}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${AWS_ACCESS_KEY_ID}|${env.AWS_ACCESS_KEY_ID}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${AWS_SECRET_ACCESS_KEY}|${env.AWS_SECRET_ACCESS_KEY}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${AWS_REGION}|${env.AWS_REGION}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${AWS_S3_BUCKET}|${env.AWS_S3_BUCKET}|g' BackEnd/src/main/resources/application.yml
                sed -i 's|\${FLASK_SERVER_URL}|${env.FLASK_SERVER_URL}|g' BackEnd/src/main/resources/application.yml
                """

            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/BackEnd"){
                    script {
                        sh "ls -al"
                        sh "chmod +x ./gradlew"
                    }
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    sh "docker build -t ${DOCKERHUB_REGISTRY} BackEnd"
                }
            }
        }
        stage("Login") {
            steps {
                 sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker push ${DOCKERHUB_REGISTRY}"
                    }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "docker ps"
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker stop back || true"  // Ignore error ifgit  container doesn't exist
                        sh "docker rm back || true"    // Ignore error if container doesn't exist
                        sh "docker rmi ${DOCKERHUB_REGISTRY}|| true"     //images 날리기
                        sh "docker pull ${DOCKERHUB_REGISTRY}"
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        try {
                        sh "docker run -d --name back -p 9003:8080 \
                        ${DOCKERHUB_REGISTRY}"
//                             sh "docker-compose -f ${env.WORKSPACE}/docker-compose.yml up -d"

                        } catch(Exception e) {
                            sh "docker restart back || true"  // Ignore error if container doesn't exist
                        }
                    }
                }
            }
        }


    }
}
